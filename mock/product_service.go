// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ortymid/market/market/product (interfaces: Interface)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	product "github.com/ortymid/market/market/product"
	reflect "reflect"
)

// ProductService is a mock of Interface interface
type ProductService struct {
	ctrl     *gomock.Controller
	recorder *ProductServiceMockRecorder
}

// ProductServiceMockRecorder is the mock recorder for ProductService
type ProductServiceMockRecorder struct {
	mock *ProductService
}

// NewProductService creates a new mock instance
func NewProductService(ctrl *gomock.Controller) *ProductService {
	mock := &ProductService{ctrl: ctrl}
	mock.recorder = &ProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ProductService) EXPECT() *ProductServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *ProductService) Create(arg0 context.Context, arg1 product.CreateRequest) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *ProductServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProductService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *ProductService) Delete(arg0 context.Context, arg1 string) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *ProductServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProductService)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *ProductService) Get(arg0 context.Context, arg1 string) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *ProductServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ProductService)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *ProductService) List(arg0 context.Context, arg1 product.ListRequest) ([]*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *ProductServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ProductService)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *ProductService) Update(arg0 context.Context, arg1 product.UpdateRequest) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *ProductServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProductService)(nil).Update), arg0, arg1)
}
