// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ortymid/market/grpc (interfaces: AuthService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	user "github.com/ortymid/market/market/user"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// GRPCAuthService is a mock of AuthService interface
type GRPCAuthService struct {
	ctrl     *gomock.Controller
	recorder *GRPCAuthServiceMockRecorder
}

// GRPCAuthServiceMockRecorder is the mock recorder for GRPCAuthService
type GRPCAuthServiceMockRecorder struct {
	mock *GRPCAuthService
}

// NewGRPCAuthService creates a new mock instance
func NewGRPCAuthService(ctrl *gomock.Controller) *GRPCAuthService {
	mock := &GRPCAuthService{ctrl: ctrl}
	mock.recorder = &GRPCAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *GRPCAuthService) EXPECT() *GRPCAuthServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method
func (m *GRPCAuthService) Authorize(arg0 context.Context, arg1 metadata.MD) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize
func (mr *GRPCAuthServiceMockRecorder) Authorize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*GRPCAuthService)(nil).Authorize), arg0, arg1)
}

// MetadataWithAuthorization mocks base method
func (m *GRPCAuthService) MetadataWithAuthorization(arg0 context.Context, arg1 *user.User) (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataWithAuthorization", arg0, arg1)
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataWithAuthorization indicates an expected call of MetadataWithAuthorization
func (mr *GRPCAuthServiceMockRecorder) MetadataWithAuthorization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataWithAuthorization", reflect.TypeOf((*GRPCAuthService)(nil).MetadataWithAuthorization), arg0, arg1)
}
