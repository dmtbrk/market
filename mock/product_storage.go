// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ortymid/market/market/product (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	product "github.com/ortymid/market/market/product"
	reflect "reflect"
)

// ProductStorage is a mock of Storage interface
type ProductStorage struct {
	ctrl     *gomock.Controller
	recorder *ProductStorageMockRecorder
}

// ProductStorageMockRecorder is the mock recorder for ProductStorage
type ProductStorageMockRecorder struct {
	mock *ProductStorage
}

// NewProductStorage creates a new mock instance
func NewProductStorage(ctrl *gomock.Controller) *ProductStorage {
	mock := &ProductStorage{ctrl: ctrl}
	mock.recorder = &ProductStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ProductStorage) EXPECT() *ProductStorageMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *ProductStorage) Create(arg0 context.Context, arg1 product.CreateRequest) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *ProductStorageMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProductStorage)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *ProductStorage) Delete(arg0 context.Context, arg1 string) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *ProductStorageMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProductStorage)(nil).Delete), arg0, arg1)
}

// Find mocks base method
func (m *ProductStorage) Find(arg0 context.Context, arg1 product.FindRequest) ([]*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *ProductStorageMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*ProductStorage)(nil).Find), arg0, arg1)
}

// FindOne mocks base method
func (m *ProductStorage) FindOne(arg0 context.Context, arg1 string) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *ProductStorageMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*ProductStorage)(nil).FindOne), arg0, arg1)
}

// Update mocks base method
func (m *ProductStorage) Update(arg0 context.Context, arg1 product.UpdateRequest) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *ProductStorageMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProductStorage)(nil).Update), arg0, arg1)
}
